// Инициализируем три указателя i, j, k на первый, второй и последний элементы массива соответственно.
// Повторяем следующее, пока k > j > i:
// a. Если arr[i] + arr[j] + arr[k] == X, то мы нашли искомый набор элементов, возвращаем true.
// b. Если arr[i] + arr[j] + arr[k] > X, то мы двигаем указатель k на один шаг влево.
// c. Если arr[i] + arr[j] + arr[k] < X, то мы двигаем указатель j на один шаг вправо.
// d. Если j == k, то мы двигаем указатель i на один шаг вправо и сбрасываем значения указателей j и k.
// Если мы не нашли искомый набор элементов, возвращаем false.
// Временная сложность этого алгоритма составляет O(N^2), так как каждый элемент массива будет сравниваться с каждым другим элементом.
function hasTripletsWithSum(arr, X) {
  const n = arr.length;
  for (let i = 0; i < n - 2; i++) {
    let j = i + 1;
    let k = n - 1;
    while (j < k) {
      const sum = arr[i] + arr[j] + arr[k];
      if (sum === X) {
        return true;
      } else if (sum > X) {
        k--;
      } else {
        j++;
      }
      if (j === k) {
        break;
      }
    }
  }
  return false;
}

// Пример использования
const arr = [1, 2, 3, 4, 5, 6, 7, 8, 9];
const X = 15;
if (hasTripletsWithSum(arr, X)) {
  console.log("Набор из трех разных элементов сумма которых равна", X, "существует.");
} else {
  console.log("Набор из трех разных элементов сумма которых равна", X, "не существует.");
}
