create database if not exists platform;
use platform;

create table if not exists users(
    user_id integer primary key auto_increment,
	fullname varchar(256) not null,
	email varchar(64) not null,
	is_blocked BOOL default false,
	created_at datetime default current_timestamp
    
);

create table if not exists streams(
    stream_id integer primary key auto_increment,
	user_id integer,
	title varchar(256) not null,
    created_at datetime default current_timestamp,
	is_completed bool default false,
    FOREIGN KEY (user_id) REFERENCES users(user_id)
);

create table if not exists reactions(
    reaction_id integer primary key auto_increment,
	user_id integer,
    value integer not null check(value between 1 and 5),
    stream_id integer,
    created_at datetime default current_timestamp,
	is_blocked bool default false,
    FOREIGN KEY (user_id) REFERENCES users(user_id),
    FOREIGN KEY (stream_id) REFERENCES streams(stream_id)
);


                    
insert into users (fullname, email)
			values ('Виктор', 'bjdc@gmail.com'),
					('Елена', 'asd@gmail.com'),
                    ('Антон', 'zxcv@gmail.com'),
                    ('Олег', 'tyu@mail.ru'),
                    ('Константин', 'vbn@mail.ru');
                    
insert into streams (user_id, title)
			values (1 , 'title user_1'),
					(2, 'title user_2'),
                    (3, 'title user_3'),
                    (4, 'title user_4'),
                    (5, 'title user_5');
                    
                    
insert into reactions (user_id, value, stream_id) 
			values	(1, 3, 1), 
					(2, 4, 2), 
					(3, 5, 3), 
					(4, 2, 4), 
					(5, 1, 5);
			
            
-- Задача
	-- - вывести информацию о стримах.
	-- - поля
		-- - название_стрима
		-- - имя_пользователя
select streams.title, users.fullname
FROM streams
LEFT JOIN users ON streams. user_id = users.user_id
ORDER BY streams.created_at
LIMIT 40 OFFSET 80;

-- ЗАДАЧА
	-- - доработать запрос, так
	  -- чтобы выводились только текущие стримы
select streams.title, users.fullname
FROM streams
LEFT JOIN users ON streams. user_id = users.user_id
where is_completed = false;


-- ЗАДАЧА
	-- - вывести стримы начатые сегодня
select streams.title, users.fullname
FROM streams
LEFT JOIN users ON streams. user_id = users.user_id
where streams.is_completed = false and date (streams.created_at) >= '2023-02-09';
-- where streams.is_completed = false and date (streams.created_at) >=  current_date();


-- ЗАДАЧА
	-- - вывести ко-во завершенных стримов
SELECT COUNT(*) as total, streams.is_completed
FROM streams
where is_completed = true;


-- ЗАДАЧА
	-- - завершить стрим номер 1
set  sql_safe_updates = 0;
update streams
set is_completed = true
where stream_id = 1;

-- Задача
	-- - добавить в таблицу 'streams' поле 'duration_secs'
alter table streams
add duration_secs int check (duration_secs >=0) auto_increment  NOT NULL;

-- Задача
	-- - завершить стримы 1 и 2 в таблице 'streams' и добавитьвремя 1 час(в сек 3600)
update streams
set is_completed = true, duration_secs = 3600
where stream_id in (1,2);


-- ЗАДАЧА 
	-- - завершить стрим 3 - продолжительность 1200
	-- - завершить стрим 4 - продолжительность 500
	-- - завершить стрим 5 - продолжительность 7200
    -- решается по очередно 
update streams
set is_completed = true, duration_secs = 1200
where stream_id = 3;

update streams
set is_completed = true, duration_secs = 500
where stream_id = 4;

update streams
set is_completed = true, duration_secs = 7200
where stream_id = 5;


-- ================ второй вариант 
UPDATE streams
SET is_completed=true,
	duration_secs=CASE
	WHEN stream_id=3 THEN 777
	WHEN stream_id=4 THEN 888
	WHEN stream_id=5 THEN 999
END
WHERE stream_id in (3, 4, 5);

-- Задача
	-- - вывести сред. продолжительность стрима
    select 
    AVG(duration_secs) as Avg_duration_secs,
	min(duration_secs) as min_duration_secs,
	max(duration_secs) as max_duration_secs,
	count(duration_secs) as count_duration_secs,
	sum(duration_secs) as sum_duration_secs
    from streams;
    
    
    
    
-- Задача
	-- "поиск стримов"
	-- - вывести завершенные стримы, у которых имя пользователя начинается на букву "A"
	-- - поля на выходе (проекция)
		-- название_стрима
		-- имя_автора
		-- продолжительность_стрима

SELECT streams.title, users.fullname, streams.duration_secs
FROM streams
LEFT JOIN users ON streams.user_id=users.user_id  
WHERE streams.is_completed=false AND users.fullname LIKE 'A%';


-- Задача (2)
   -- - вывести средний рейтинг (оценку) для кадого стрима
SELECT AVG(reactions.value) AS rating, streams.title
FROM reactions
LEFT JOIN streams ON reactions.stream_id=streams.stream_id
GROUP BY reactions.stream_id;
   
   
   
-- ================================


-- Задача (1)
	-- - вывести только 3 самых рейтинговых стрима

SELECT AVG(reactions.value) AS rating, streams.title
FROM reactions
LEFT JOIN streams ON reactions.stream_id=streams.stream_id
GROUP BY reactions.stream_id
ORDER BY rating DESC
LIMIT 3;
   
   -- Задача (2)
	-- - вывести только стримы, у которых рейтинг от 3
SELECT AVG(reactions.value) AS rating, streams.title
FROM reactions
LEFT JOIN streams ON reactions.stream_id=streams.stream_id
GROUP BY reactions.stream_id
HAVING rating >= 3
ORDER BY rating DESC;
   
   
   
   
-- Задача (3)
	-- - вывести один стрим, у которого больше всего оценок
	-- - поля на выходе
	-- 	- название стрима
	-- 	- ко-во оценок   
    
select count(*) as total_reactions, streams.title
from reactions
LEFT JOIN streams ON reactions.stream_id=streams.stream_id
GROUP BY reactions.stream_id
ORDER BY total_reactions DESC
LIMIT 1;


-- Задача (4)
-- Добавить для стрима номер 5  еще 5 реакций
INSERT INTO reactions (user_id, value, stream_id)
VALUES
(1, 2, 5),
(2, 4, 5),
(3, 3, 5),
(4, 4, 5),
(5, 5, 5);



-- задача (5)
-- - вывести по стриму 5 колличество распределенных оценок
SELECT  value,	
	COUNT(*) AS count
FROM reactions
WHERE stream_id = 5
GROUP BY value
ORDER BY value DESC;


-- =====================


CREATE TABLE IF NOT EXISTS donations (
  donation_id INTEGER PRIMARY KEY AUTO_INCREMENT,
  donator_id INTEGER,
  stream_id INTEGER,
  amount DECIMAL(10, 2) CHECK (amount > 0),
  created_at DATETIME DEFAULT CURRENT_TIMESTAMP,
  comment VARCHAR(128),
  FOREIGN KEY (donator_id) REFERENCES users(user_id),
  FOREIGN KEY (stream_id) REFERENCES streams(stream_id)
);
-- Задача
	-- - добавить донаты в к-ве десяти штук с произвольными суммами к разным стримам	
	INSERT INTO donations (stream_id, amount, donator_id)
		VALUES
			(5, 20, 1),
			(5, 10, 2),
			(5, 15, 3),
			(5, 24, 4),
			(5, 18, 1),
			(5, 88, 2),
			(5, 24, 3),
			(5, 40, 3),
			(5, 3, 3);
            
            
-- Задача (1)
-- 	- добавить поле country в таблицу users
	ALTER TABLE users
	ADD COLUMN country varchar(128);

UPDATE users
	SET country='Germany'
	WHERE user_id=1;

UPDATE users
	SET country='Germany'
	WHERE user_id=2;
    
UPDATE users
	SET country='Germany'
	WHERE user_id=3;

UPDATE users
	SET country='Poland'
	WHERE user_id=4;
    
    UPDATE users
	SET country='Germany'
	WHERE user_id=5;

UPDATE users
	SET country='Poland'
	WHERE user_id=6;
    
UPDATE users
	SET country='Poland'
	WHERE user_id=7;

UPDATE users
	SET country='Poland'
	WHERE user_id=8;
    UPDATE users
	SET country='Poland'
	WHERE user_id=9;

UPDATE users
	SET country='Germany'
	WHERE user_id=10;
    
    



       
        
        
        
        
        
-- Задача ()
-- 	- вывести среднюю сумму пожертвования        
	SELECT AVG(amount) AS avg_amount
		FROM donations;
        
-- Задача ()
-- 	- вывести уникальными значения столбца country.   
SELECT DISTINCT country FROM users;




   
   
   
        
select * from users;
select * from  streams;
select * from  reactions;