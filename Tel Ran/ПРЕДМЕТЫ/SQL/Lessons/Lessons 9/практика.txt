-- Задача  (1)

	-- вывести кол. распределение оценок
	-- на выходе (пример)
	
	
		- "5" -- 500
		- "4" -- 100
		- "3" -- 50
		- "2" -- 1000
		- "1" -- 100
		
        
        
SELECT COUNT(VALUE) as amount_reactions, value
	FROM reactions
	GROUP BY value
	ORDER BY value DESC;








-- Задача (2)
	-- вывести ко-во сообщений для каждого пользователя в рамках чата №1

select 
	author_id,
	count(message_id) as total_messages
	from messages 

	where chat_id = 1
	group by author_id;






-- Задача (3)
	-- вывести чаты, где ко-во сообщений больше одного

SELECT chat_id, COUNT(*) AS num_messages
	FROM messages
	GROUP BY chat_id
	HAVING num_messages > 1;




-- Задача (4) 
-- вывести чаты, где ко-во сообщений (за сегодня) больше одного

SELECT chat_id, COUNT(*) AS num_messages
	FROM messages
	WHERE date(created_at) = current_date()
	GROUP BY chat_id;




-- Задача
	-- вывести среднее ко-во символов в сообщениях для каждого чата
	
	SELECT AVG(LENGTH(text)) as avg_text, chat_id
	FROM messages
	GROUP BY chat_id;
 
 
 
 
 
-- ////////////////////
ALTER TABLE users
	ADD is_worker BOOL;

ALTER TABLE users
	ALTER is_worker SET default false;




-- ЗАДАЧА
	-- назначить юзеров 2,3,4 сотрудниками
    update users
    set is_worker = true
    where user_id in (2,3,4);
	


-- ЗАДАЧА
	-- вывести все сообщеняи сотрудников
select text
	from messages
	join users on users.user_id=messages.author_id
	where is_worker=true






-- ЗАДАЧА
	-- создать таблицу выплат (salaries)
create table if not exists salaries
				(salary_id int primary key auto_increment,
                created_at datetime default current_timestamp,
                worker_id int not null,
                value numeric(10,2) not null check (value > 0),
                FOREIGN KEY (worker_id) REFERENCES users(user_id)
                );


-- Задача (2)

	-- добавить записи о выплатах сотрудникам 2, 3, 4
insert into salaries (worker_id, value)
	values (2, 1200),
		(3, 2100),
            	(4, 3000);


-- ЗАДАЧА
 -- вывести сотрудника (информацию о нем). который получил больше всего выплат за февраль


SELECT SUM(value) total_payment, users.fullname
	FROM salaries
	LEFT JOIN users ON salaries.worker_id = users.user_id
	WHERE users.is_worker=true and salaries.created_at >= '2023-02-01' AND  salaries.created_at < '2023-03-01'

	GROUP BY salaries.worker_id

	ORDER BY total_payment DESC
	LIMIT 1;




select * from users;
select * from messages;
select * from chats;
select * from reactions;
select * from salaries;






