 -- ==============================
Задача
	- описать сущность ЮЗЕР (пользователь) 5-6 полями через ассоц/массив

user = {
     id: 'UUID',
     created_date : 'Дата/время',
     
     second_name: 'Viktar',
     first_name: 'Test',
     date_birthd: 99,
  
     phone: +123456789,
     emails: 
             [    
             'test1@gc.com',
             'test2@gc.com',
             ],
     passwod_hash: 'HASH_code'
 };






 -- ==============================
// регистрация юзера
db.users.insertOne(
    {
        'id': 'u001',
        'created_at': new Date(),
        'fullname': 'Ivan Ivanov',
        'country': 'Germany',
        'email': 'ivanovi@example.org'
    }
)






 -- ==============================
insertMany(

	[
		{},
		{},
		{},
		{},
		{},
	]
)



 -- ==============================
db.users.find() - выводит все подряд






-- ==============================
db.users.find(
    {}, // filter
    {'country': 1, 'email': 1, '_id': 0} // projection
)          
// 1 - включить в проекцию, исключить








-- ==============================
db.users.find(
    {}, // filter
    {'country': 'Germany'} // projection
)







-- ==============================
Задача
	- вывести клиентов из Германии
	- только поля
		-- полное имя
		-- email
db.users.find(
    {
        'country': 'Germany'
    }, // filter
    {
        'fullname': 1, email: 1, '_id': 0
    } // projection
)








-- ==============================
db.users.updateMany(
    {
        'country': 'USA'
    }, // filter
    {
        '$set': { // устанавливает поля
            'is_blocked': true
        }
    } // action
)







-- ==============================
db.users.updateMany(
    {
        'country': 'USA'
    }, // filter
    {
        '$unset': {
            'is_blocked': null
        }
    } // action
)








-- ==============================
Задача
	- установить каждому (всем) пользователю
	1000 баллов
	
	'balance'

db.users.updateMany(
    {}, // filter
    {
        '$set': { // устанавливает поля
            'balance': '1000'
        }
    } // action
)







-- ==============================
// применили скидкуу в 25%
db.users.updateMany(
    {}, // filter
    
    {
        '$mul': { // устанавливает поля
            'balance': 1.25'
    }
    } // action
)




-- ==============================
// уменьшили на 40%
db.users.updateMany(
    {}, // filter
    
    {
        '$mul': { // устанавливает поля
            'balance': 0.6'
    }
    } // action
)





-- ==============================
// поменял у своего пользователя баланс
db.users.updateMany(
    {
        'id': 'u099'
    }, // filter
    
    {
        '$set': { // устанавливает поля
            'balance': '2000'
    }
    } // action
)






-- ==============================
// чей Баланс больше 1000
db.users.find(
    {
        'balance': {'$gte': 1000}
    } // filter
)







-- ==============================

// чей Баланс в каком-либо диапазоне
db.users.find(
    {
        'balance': {'$gte': 1000, '$lte': 1500}
    } // filter
)







-- ==============================
Задача
	- вывести долларовые ТХ от 1,000
db.transactions.find(
    {
        'amount': {'$gte': 1000},
        'currency': 'usd'
    } // filter
)



-- ==============================
Задача
	- вывести долларовые ТХ от 500 до 1,000
db.transactions.find(
    {
        'amount': {'$gte': 500, $lte': 1000},
        'currency': 'usd'
    } // filter
)


-- ==============================
Задача 
	- вывести ко-во долларовых ТХ
db.transactions.countDocuments(
    {
        'currency': 'usd'
    } 
)


-- ==============================
db.transactions.findOne(
    {
        "id" : "t001",
      
    },
    {
        "amount": 1,
        "currency": 1,
        _id:0
    }
)
=====================================
db.transactions.deleteMany(
   
    {
        "amount" : 0
    }
)

=====================================
Задача 
	- отметить завершенными две транзакции ID 't001', 't101'
	- is_completed: true
	- completed_at

db.transactions.updateMany(
    {'id': {'$in': ['t001', 't101']}}, // filter
    {
        '$set': {
            'is_completed': true,
            'completed_at': new Date()
        }
    } // action
)





=====================================
ДОБАВИМ ИЛИ УДАЛИМ какое-то значение в документ
Push создаст дубли
db.calls.updateMany(
    {}, // filter
    {
        '$pull' или '$push': {
            'topic': 'credit'
        }
    }
)
============
addToSet запишет только одни раз без дублей
db.calls.updateMany(
    {}, // filter
    {
        '$addToSet': {
            'topic': 'credit'
        }
    }
)
============
each ДОБАВИТ В МАССИВ ОДИН ИЛИ МНОГО ЖЕСТВО. БЕЗ ДУБЛЕЙ
db.calls.updateMany(
    {}, // filter
    {
        '$addToSet': {
            'topic': {'$each': ['credit', 'premium']}
        }
    }
)

============
pullAll УДАЛЯЕТ ЭЛЕМЕНТЫ СПИСКОМ
db.calls.updateMany(
    {}, // filter
    {
         '$pullAll': {
             'topic': ['credit', 'premium']
         }
    }
)



=====================================
Задача 
	- для всех вход. звонков от 5 мин
		(1) добавить темы общения 'debt', 'premium'
		(2) установить дату завершения звонка
db.calls.updateMany(
    {
        'direction': 'in', или "$nin"
        'duration_secs': {'$gte': 5*60}
    }, // filter
    {
        '$addToSet': 
            {'topic': {'$each': ['debt', 'premium']}
                    },
        '$set': {'completed_at': new Date()}
    }
)




=====================================
Задача 
- вывести ко-во исходящих звонков до 1 ч

db.calls.countDocuments(
    {
        'direction': 'out',
        'duration_secs': {'lte': 60*60},
        
    }, // filter

)

=====================================
Задача 
- вывести ко-во исходящих звонков до 1 ч по теме 'credit'

db.calls.countDocuments(
    {
        'direction': 'out',
        'topic': 'credit'
    }, // filter

)


=====================================
//Задача (1)
//	- для всех входящих и исходящих звонков до 1 часа
//		(1) увеличить счетчик "listen_count" на 1
//		(2) убрать тему общения 'debt'

db.calls.updateMany(
    {
        'direction': {'$in': ['out', 'in']},
        'duration_secs': {'$lte': 60*60},
    },
    {
        "$inc": {
            "listen_count": 1
        },
        '$pullAll': {
             'topic': ['debt']
         }
    }
)


=====================================
Задача 

	- заблокировать всех пользователей из Китая
	
	is_blocked: true
	- причина
	- дата/время
	- кто заблокировал



db.users.updateMany(
    {
        'country': 'China'
 
    },
    {
        "$set": {
            "is_blocked" : true
        }
    }
)
=====================================

db.users.updateMany(
    {
        'country': {'$nin' : ['China', 'Spain']}
 
    },
    {
        "$set": {
            "is_blocked" : false
        }
    }
)




=====================================
Задача 

	- заблокировать всех пользователей из Китая
	
	is_blocked: true
	- причина
	- дата/время
	- кто заблокировал

db.users.find({
    country: {$in: ['China', 'Spain']},
    is_blocked: {'$ne': true}
})



=====================================
db.users.find(
    {
        '$or': [
            {'country': 'China'},
            {'balance': 0}
        ]
    }
)



=====================================

Задача
	
	- найти всех пользователей из Германии:
		-- с балансом от 100
			ИЛИ
		-- со значением is_active: true


db.users.find(
    {
        'country': 'Germany',
        '$or': [
            {'balance': {'$gte': 100}},
            {'is_active': true}
        ]
    }
)




=====================================
Задача
	
	- найти всех пользователей из НЕ Германии:
		-- с балансом от 5000
			ИЛИ
		-- со значением is_premium: true
db.users.find(
    {
        'country': {'$ne': 'Germany'},
        '$or': [
            {'balance': {'$gte': 5000}},
            {'is_premium': true}
        ]
    }
)








=====================================

db.users.find(
    {
        '$nor': [
            {'country': 'Germany'},
            {'balance': {'$gte': 5000}},
            {'is_premium': true}
        ]
    }
)








=====================================

Сравнили как проще написать
db.users.find(
    {
//        'balance': {'$not': {'$gte': 500}}
          'balance': {'$lt': 500}
    }
)


=====================================
Задача 

	- найти всех пользователей не из Китая и с балансом не менее 100

db.users.find(
    {
        'country': {'$ne': 'China'},
        'balance': {'$gte': 100}
    }
)


==========================================


db.users.find(
    {
      '$nor': [
          {'country': 'China'},
          {'balance': {'$lt': 100}}
      ]
    }
)


==========================================

//(1) увеличить поле price на 20%
//	$mul
//(2) уменьшить поле price на 20%
//	$mul
//	
//	
//Задача
//	- написать два запроса на решение указанных задач
//	
//	
//	коллекция: goods
////	поле с ценой: price

db.goods.updateMany(
{
         
},
    {'$mul': 
        {
          "price" : 1.2,
        }            
}
)
====
db.goods.updateMany(
{
         
},
    {'$mul': 
        {
          "price" : 0.2,
        }            
}
)













Задача
	- вывести всех заблокированных пользователей

db.users.find(
{
    "is_blocked" : true,
}
)



Задача
	- вывести всех НЕ заблокированных пользователей

db.users.find(
	{
		'is_blocked': {$ne: true}
	}
)


// !!!!! проверить !!!!!
//db.users.find(
//{
//    'or': [
//            {"is_blocked" : false},
//            {"is_blocked" : {'$exists': false}}
//            ]
//}
//)






========================================
Задача
	- для всех телефонных разговоров более 5 мин
		- добавить в поле 'topic' два значения
			-- credit
			-- premium

db.calls.updateMany(
{
    "duration_secs" : {'$gte': 5*60} 
},
{
    '$addToSet':{
            "topic" : {'$each': ['credit', 'premium']} 
                }
}
)




========================================
Задача
	- для всех разговоров с продолжительностью от 1 мин или темой 'premium'
	
	(1) удалить тему 'news'
	(2) добавить тему 'important'
	(3) установить поле is_checked: true (проверно)


db.calls.updateMany(
    {
        '$or': [
            {'duration_secs': {'$gte': 60}},
            {'topic': 'premium'}
        ]
    }, // filter
    {
        '$set': {'is_checked': true},
        '$addToSet': {'topic': 'important'},
        '$pull': {'topic': 'news'}
    } // action
)






========================================

Задача
	- найти всех пользователей из Германии, которые
		(1) заблокированы
			или
		(2) имеют нулевой баланс

db.users.find(
    {
        'country': 'Germany',
        '$or': [
            {'is_blocked': true},
            {'balance': 0},
            {'balance': {'$exists': false}}
        ]
    }
)























		АГРЕГАЦИЯ
==========================================
db.users.aggregate([
    { // этап 1 - фильтрация
        '$match': {
            'country': 'Germany'
        }
    }
])

=====

db.calls.aggregate([
    { // этап 1 - фильтрация
        '$match': {
            'direction': 'out'
        }
    }
])


======

db.calls.aggregate([
    { // этап 1 - фильтрация
        '$match': {
            'direction': 'out'
        }
    },
    {
        '$sort': {
            'duration_secs': -1
        }
    }
])


======

db.calls.aggregate([
    { // этап 1 - фильтрация
        '$match': {
            'direction': 'out'
        }
    },
    { // этап 2 - сортировка
        '$sort': {
            'duration_secs': -1
        }
    },
    { // этап 3 - проекция
        '$project': {
            'duration_secs': 1,
            '_id': 0
        }
    }
])



==========================================
db.calls.aggregate([
    {
        '$sort': {
            'duration_secs': -1
        }
    },
    {
        '$limit': 1
    }
])







==========================================
limit = 5
page = 1
skip = 

Задача
	- напишите формулу расчета переменной 'skip'

skip = limit * (page - 1)
skip = page * limit - limit









==========================================

db.users.aggregate([
    {
        '$match': {
            'is_blocked': {'$ne': true},
            'balance': {'$lt': 0}
        }
    },
    {
        '$count': 'users_count'
    }
])





==========================================
//db.goods.aggregate([
//    {
//        '$sample': {'size': 1}
//    }
//])




==========================================
Задача 
	- вывести имена и балансы пользователей не из Германии
db.users.aggregate([
    {
       '$match':
                {"country" :{'$ne': "Germany"}}
    }, //filter
    
    {'$sort': {
            'balance': 1
               }},
    {
      '$project': 
                  { "fullname" : 1,
                     "balance" : 1 ,
                     _id: 0}
    }
])




==========================================
Задача
	- вывести одного произвольного пользователя, у которого
		(1) баланс более 100
			и
		(2) статус не "премиум"
db.users.aggregate([
    {
       '$match':
                {"balance" : {'$gte': 100},
                "status" : "premium"
                }
    }, //filter
    
    {
      '$sample': {'size': 1}
    }
                  
])



======

db.users.aggregate([
    {
        $match: {
            balance: { $gt: 100 },
            is_premium: { $ne: true }
        }
    },
    {
        $sample: {
            size: 1
        }
    }
])





==========================================
Задача
	- вывести все транзакции из Китая
db.transactions.aggregate([
    {
        '$lookup': {
            'from': 'users',
            'localField': 'sender_id',
            'foreignField': 'id',
            'as': 'sender'
        }
    },
    {
        '$match': {
            'sender.country': 'China'
        }
    }
])


==========================================
Задача
	- вывести все транзакции из Китая и в Китай

db.transactions.aggregate([
    {
        '$lookup': {
            'from': 'users',
            'localField': 'sender_id',
            'foreignField': 'id',
            'as': 'sender'
        }
    },
    {
        '$lookup': {
            'from': 'users',
            'localField': 'recipient_id',
            'foreignField': 'id',
            'as': 'recipient'
        }
    },
    {
        '$match': {
            '$or': [
                { 'sender.country': 'China' },
                { 'recipient.country': 'China' }
            ]
        }
    }
])








========= добавили новое поле ===================
db.goods.aggregate([
    {
        '$project': {
            '_id': 0,
            'id': 1,
            'price_eur': '$price',
        }
    }
])






========= поменяли курс валюты ==================
db.goods.aggregate([
    {
        '$project': {
            '_id': 0,
            'id': 1,
            'price_eur': '$price',
            'price_usd': {'$multiply': ['$price', 1.05]}
        }
    }
])






========= добавили поля к уже имеющимся ===================
db.goods.aggregate([
    {
        '$addFields': {
            'price_usd': {'$multiply': ['$price', 1.05]}
        }
    }
])
